
struct Vec2i imm {
  x int;
  y int;
}

func +(a Vec2i, b Vec2i) Vec2i {
  Vec2i(a.x + b.x, a.y + b.y)
}

func -(a Vec2i, b Vec2i) Vec2i {
  Vec2i(a.x - b.x, a.y - b.y)
}

func *(a Vec2i, b int) Vec2i {
  Vec2i(a.x * b, a.y * b)
}

func /(a Vec2i, b int) Vec2i {
  Vec2i(a.x / b, a.y / b)
}

// namespace Geomancer.Model {
// public struct Vec2i : IComparable<Vec2i> {
//   public static readonly string NAME = "Vec2i";
//   public class EqualityComparer : IEqualityComparer<Vec2i> {
//     public bool Equals(Vec2i a, Vec2i b) {
//       return a.Equals(b);
//     }
//     public int GetHashCode(Vec2i a) {
//       return a.GetDeterministicHashCode();
//     }
//   }
//   public class Comparer : IComparer<Vec2i> {
//     public int Compare(Vec2i a, Vec2i b) {
//       return a.CompareTo(b);
//     }
//   }
//   private readonly int hashCode;
//          public readonly int x;
//   public readonly int y;
//   public Vec2i(
//       int x,
//       int y) {
//     this.x = x;
//     this.y = y;
//     int hash = 0;
//     hash = hash * 37 + x;
//     hash = hash * 37 + y;
//     this.hashCode = hash;

//   }
//   public static bool operator==(Vec2i a, Vec2i b) {
//     return a.Equals(b);
//   }
//   public static bool operator!=(Vec2i a, Vec2i b) {
//     return !a.Equals(b);
//   }
//   public override int GetHashCode() {
//     return GetDeterministicHashCode();
//   }
//   public int GetDeterministicHashCode() { return hashCode; }
//   public int CompareTo(Vec2i that) {
//     if (x != that.x) {
//       return x.CompareTo(that.x);
//     }
//     if (y != that.y) {
//       return y.CompareTo(that.y);
//     }
//     return 0;
//   }
//   public override string ToString() { return DStr(); }
//   public string DStr() {
//     return "Vec2i(" +
//         x + ", " +
//         y
//         + ")";

//     }
//     public static Vec2i Parse(ParseSource source) {
//       source.Expect(NAME);
//       source.Expect("(");
//       var x = source.ParseInt();
//       source.Expect(",");
//       var y = source.ParseInt();
//       source.Expect(")");
//       return new Vec2i(x, y);
//   }
    
    
func distance(this Vec2i, b Vec2i) int {
  ret int(
      fsqrt(
          float(
              (b.x - this.x) * (b.x - this.x) +
              (b.y - this.y) * (b.y - this.y))));
}

//     public Vec2i mul(int f) {
//       return new Vec2i(this.x * f, this.y * f);
//     }

//     public Vec2i div(int f) {
//       return new Vec2i(this.x / f, this.y / f);
//     }

//     public int dot(Vec2i that) {
//       return this.x * that.x + this.y * that.y;
//     }

//     public Vec2i minimums(Vec2i that) {
//       return new Vec2i(Math.Min(this.x, that.x), Math.Min(this.y, that.y));
//     }

//     public Vec2i maximums(Vec2i that) {
//       return new Vec2i(Math.Max(this.x, that.x), Math.Max(this.y, that.y));
//     }
// }
       
// }
